# Default values for release-package-service.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: artifactory-iwf.example.com/mirai-docker/release-package-service
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
# fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
# runAsNonRoot: true
# runAsUser: 1000

service:
  type: ClusterIP
  port: 8080

ingress:
  enabled: false
  annotations: {}
  # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths: []
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  limits:
    memory: 2000Mi
  requests:
    cpu: 100m

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

container:
  env:
    - name: JAVA_TOOL_OPTIONS
      value: -Xmx1500m
    - name: SPRING_PROFILES_ACTIVE
      valueFrom:
        configMapKeyRef:
          name: common
          key: environment
    - name: SPRING_DATASOURCE_USERNAME
      valueFrom:
        secretKeyRef:
          name: release-package-service
          key: spring.datasource.username
    - name: SPRING_DATASOURCE_PASSWORD
      valueFrom:
        secretKeyRef:
          name: release-package-service
          key: spring.datasource.password
    - name: SPRING_DATASOURCE_URL
      valueFrom:
        secretKeyRef:
          name: release-package-service
          key: spring.datasource.url
    - name: SPRING_REDIS_HOST
      value: release-package-service-redis-master
    - name: SPRING_REDIS_PASSWORD
      valueFrom:
        secretKeyRef:
          name: release-package-service-redis
          key: password
    - name: MIRAI_LIBRARIES_JMS_USERNAME
      valueFrom:
        secretKeyRef:
          name: ems
          key: java.messaging.provider.username
    - name: MIRAI_LIBRARIES_JMS_PASSWORD
      valueFrom:
        secretKeyRef:
          name: ems
          key: java.messaging.provider.password
    - name: MIRAI_LIBRARIES_JMS_URL
      valueFrom:
        secretKeyRef:
          name: ems
          key: java.messaging.provider.url
    - name: SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_NAM_CLIENT-ID
      valueFrom:
        secretKeyRef:
          name: oauth2
          key: client-id
    - name: SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_NAM_CLIENT-SECRET
      valueFrom:
        secretKeyRef:
          name: oauth2
          key: client-secret

initContainers:
  - name: init-release-package-service-redis-master
    image: artifactory-iwf.example.com/mirai-docker/redis
    env:
      - name: REDIS_PASSWORD
        valueFrom:
          secretKeyRef:
            name: release-package-service-redis
            key: password
    command: ['sh', '-c', "until redis-cli -a $REDIS_PASSWORD --no-auth-warning -h release-package-service-redis-master ping; do echo waiting for redis; sleep 2; done;"]
